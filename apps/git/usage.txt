1. 为远程主机设置别名
	git remote add <别名> <远程主机名>
	git remote add upstream git@git.debug.google.com:aos/bass.git 
	
	设置以后, 以下两条命令相同:
	git push upstream local:trunk
	git push git@git.debug.google.com:aos/bass.git local:trunk

2. 将master合并到当前分支
	 git merge master

3. 从远程拉取master，合并至到当前分支
   git pull <远程主机> <远程分支>
   git pull upstream  master

4. 推送到远程分支
	 git push <远程主机> <本地分支>:<远程分支>
	 
	 将本地local分支推送到远程trunk分支 
	 git push origin local:trunk

5. GIT典型工作流程:
     以trunk 为开发分支，master 为主分支。要从trunk 发起MR 为例：
   
	 1> 切换到master分支,同步代码:  git pull
	 2> 切换到要push 的分支:       git checkout trunk
	 3> 在trunk分支上执行          git rebase master
	 4> 解决冲突: 				...
	 5> 添加文件:           		git add -u   
	    # -u表示把所有track文件的修改加入缓存，而不加入文件。
		# 注: 此处不可调用commit
	
	 6> 继续rebase:              git rebase --continue
	 7> 推送分支发MR:				git push ...
   
     注意事项：
	 1> 在rebase过程中及完成后，都不需要执行commit, 是git自动完成。
	 2> 如中间遇到某个补丁不需要patch, 可以用:
	    git rebase --skip
	 3> 如果想回到rebase之前状态:
	    git rebase --abort

6. 用cherry-pick 发起mr
   以release 为发布分支，master 为主分支。要从master 挑选部分commit至release， 发起MR:
   1> 切换到master分支,同步代码:  git pull
   2> 切换到release分支:         git checkout release
   
   3> 在release分支上执行cherry-pick: 
	  1> 如果是一个merger:        
	     git cherry-pick 680573cf7b54c1569d06a653990a98356de6bd36 -m 1
	       
	  2> 如果是一个提交:
	     git cherry-pick 680573cf7b54c1569d06a653990a98356de6bd36
	  
	  3> 推送release 至gitlab, 在远端发起MR
	    
   
6. 添加忽略文件
	 1> 创建全局忽略文件, 比如忽略.project文件：
	 	git config --global core.excludesfile ~/.gitignore
	 	vim ~/.gitignore， 输入下列内容, 保存退出:
	 	*.project
	 
	 2> 创建局部忽略文件, 在指定仓库目录下，如：/root/home/micheal/workspace：
	 	git config --local core.excludesfile ./gitignore


7. 内容回滚
	1> 如果新建文件或文件夹，还未加到索引区，可以直接
		git clean -fd
	
	2> 如果在已有文件上的更新，还未添加至索引区:
		git checkout -- readme.txt
	
	3> 如果文件已添加到版本库，则须用git reset回滚, 有三种模式以下一一介绍：
	   git reset --[mode] [commit number]
	   
	   3.1> soft 模式：只回滚版本库，保留索引区和工作目录:
	   
		   git reset --soft HEAD~1  //回滚至上一个版本 
		   git reset --soft fd3424  //回滚到指定版本
		   
	   3.2> mixed 模式: 回滚版本库和索引区，保留工作目录:
	   	   git reset --mixed HEAD~1 //回滚到上一个版本
	   	   git reset fd3424			//回滚至指定版本
	   
	   3.3> hard 模式: 回滚所有区域内容
	   		git reset --hard HEAD~3 //向后回滚三个版本
	   		git reset --hard fd4556 
	       
	   
	   
	